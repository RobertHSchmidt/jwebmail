$Id$

Do not commit text files with tab characters.  Your editor should have a
setting to automatically convert tabs to spaces.  If not, then use
"expand" (available for all UNIXes + Cygwin) or any other home-made or
off-the-shelf tab-expander.

Don't use liberal import statements.  Include just what you need to
prevent unnecessary name collisions in the future.

Be conservative with white space.  E.g., don't ever put white space where
it is totally useless, like blank spaces at ends of lines; or blank
lines at the very beginning of a file, the very end of a file, or
right after "{" or right before "}".
NOTE:  Don't think that I'm discouraging standard use of whitespace where
it is required to discern the tokens.  This happens a lot in this code-base,
but it is not my doing:
BAD:  int tree_depth=getFolderTree(subfolders[i],xml_folder,subscribed_only);
GOOD: int tree_depth = getFolderTree(subfolders[i], xml_folder, subscribedOnly);

Unless there is a good design reason (and sometimes there are), use camelBack
variable and member naming.  This is a JAVA product, so try to code like a
Java developer:  "subscribedOnly", not "subscribed_only".

Be conservative with comments.  Do not write your development history
in the source code.  That is what we use Subversion for.

Don't let your IDE clutter our source code with garbage.  If your IDE
writes template stuff which is not exactly right and which you do not
manually correct, then change your IDE setup to not write those templates.

Don't mis-use RCS keywords.  Whether using IDE templating or not, don't
use RCS keywords in JavaDoc elements @author, @since, @version.  For
the first two, Subversion (or CVS for that matter) will keep updating
these values, but their only purpose is to record the static values at
edit time.  For the latst (@version), what the reader will want to
know is the "release version", not the change-control revision.

When making a new file, copy the Copyright (and file Id$) boilerplate from
an existing file of the same type, and update the Copyright date if necessary.

Use block indents of 2 spaces for all *.xml files (incl. *.xsl and *.dtd),
and for HTML code in *.html, *.jsp, or fragment files (because of the copious
nesting of HTML).

Use block indents of 4 for all other computer languages (Javascript, Perl,
PHP, Java, CSS).

Miminize nesting.  Unnecessary nesting makes code more complex and more
difficult to understand for no reason (not to mention highly nested code
doesn't fit in the width of a normal editor).  Detect exceptional cases early
then handle and throw/return/continue/break and be-done-with-it, instead
of making a large if/then or if/then/else structure.

Do not System.exit() except in main() methods that will never be executed
by our running app.  Do not write to System.out or System.err.  Do not
use Thread.printStackTrace(*), which amounts to the same thing.  We have
a logging facility that makes it easy to write messages and stack traces.
NOTE:  log.*(Throwable) just logs the Throwable.toString(), but
log.*(String, Throwable) logs the stack trace.
